'.text.html.php':
  # PHP
  # class
  'protected variable':
    'prefix': 'pvar'
    'body': """
    /**
     * ${1:The active PDO connection used for reads.}
     *
     * @var ${2:\\\\PDO\|\\\\Closure}
     */
    protected \\$${3:readPdo};
    $4
    """
  'PHP function':
    'prefix': 'pfun'
    'body': """
    /**
     * ${1:Create a function}
     *
     * @param ${2:string} ${3:\\$var}
     * @return ${4:void}
     */
    ${5:public} function ${6:functionName}(${3:\\$var})
    {
        $7
    }$8
    """
  'public construct':
    'prefix': '_const'
    'body': """
    /**
     * ${1:Create a new command instance.}
     *
     * @param  ${2:type}  \\$${3:var}
     * @return $5
     */
    public function __construct(${2:type} \\$${3:var})
    {
        parent::__construct();

        $this->$4 = \\$${3:var};

        $6
    }$7
    """
  'try7':
    'prefix': 'Try Catch php7'
    'body': """
    try {
        $1
    } catch(\\\\Throwable $e) {
        \\\\Log::error($e->getFile() . ' ' . $e->getLine() . ': ' . $e->getMessage());
        $2
    } catch(\\\\Exception $e) {
        \\\\Log::error($e->getFile() . ' ' . $e->getLine() . ': ' . $e->getMessage());
        $3
    }$4
    """
  'throw exception':
    'prefix': 'throwex'
    'body': """
    throw new Exception(\\"${1:Error}\\");
    """
  'Carbon now':
    'prefix': 'car:now'
    'body': """
    Carbon::now()${1:->toDatetimeString()};
    """
  'Carbon yesterday':
    'prefix': 'car:yesterday'
    'body': """
    Carbon::yesterday()${1:->toDatetimeString()};
    """
  'Carbon tomorrow':
    'prefix': 'car:tomorrow'
    'body': """
    Carbon::tomorrow()${1:->toDatetimeString()};
    """
  'Carbon today':
    'prefix': 'car:today:start'
    'body': """
    Carbon::today()${1:->toDatetimeString()};
    """
  'Carbon start of day':
    'prefix': 'car:start'
    'body': """
    Carbon::${1:now()}->startOfDay()${2:->toDateTimeString()};
    """
  'Carbon end of day':
    'prefix': 'car:end'
    'body': """
    Carbon::${1:now()}->endOfDay()${2:->toDateTimeString()};
    """
  'Carbon start of week':
    'prefix': 'car:week:start'
    'body':"""
    Carbon::${1:now()}->startOfWeek()${2:->toDateTimeString()};
    """
  'Carbon end of week':
    'prefix': 'car:week:end'
    'body': """
    Carbon::${1:now()}->endOfWeek()${2:->toDateTimeString()};
    """
  'Carbon create datetime':
    'prefix': 'car:create'
    'body': """
    Carbon::create(${1:2019}, ${2:6}, ${3:1})->format(${4:'Y-m'});
    """
  'Carbon create custom format':
    'prefix': 'car:createFormat'
    'body': """
    Carbon::createFromFormat('${1:d/m/Y}', ${2:date})->format('${3:Y-m}');
    """
  'Carbon sub days':
    'prefix': 'car:subDays'
    'body': """
    ->subDays(${1:1})${2}
    """
  'Carbon sub months':
    'prefix': 'car:subMonths'
    'body': """
    ->subMonths(${1:1})${2}
    """
  'Carbon sub Years':
    'prefix': 'car:subYears'
    'body': """
    ->subYears(${1:1})${2}
    """
  'Carbon add Days':
    'prefix': 'car:addDays'
    'body': """
    ->addDays(${1:1})${2}
    """
  'Carbon add Months':
    'prefix': 'car:addMonths'
    'body': """
    ->addMonths(${1:1})${2}
    """
  'Carbon add Years':
    'prefix': 'car:addYears'
    'body': """
    ->addYears(${1:1})${2}
    """
  'Regex Match':
    'prefix': 'preg:match'
    'body': """
    preg_match('/${1:pattern}/', ${2:subject}${3:, matches})
    """
  'Regex Replace':
    'prefix': 'preg:replace'
    'body': """
    preg_replace('/${1:pattern}/', ${2:replacement}, ${3:subject})
    """
  'Regex Replace with Callback':
    'prefix': 'preg:replace:callback'
    'body': """
    preg_replace_callback('/${1:pattern}/', function ($matches)${2} {
        return ${3:\$matches};
    }, ${4:subject})
    """
  'PHP call function':
    'prefix': 'call:func'
    'body': """
    call_user_func(${1:array(${2:scope}, ${3:method_name})}, ${4:arg});
    """
  'PHP call function with more args':
    'prefix': 'call:func:array'
    'body': """
    call_user_func_array(${1:array(${2:scope}, ${3:method_name})}, array(${4:arg}));
    """
  'PHP read the file\'s contents':
    'prefix': 'file:get:contents'
    'body': """
    file_get_contents(${1:$url});
    """
  'PHP write the file\'s contents':
    'prefix': 'file:put:contents'
    'body': """
    file_put_contents(${1:$path}, ${2:file_get_contents(\\\\$url)});
    """
  # Laravel 5+
  #
  # Debug
  'DieDump':
    'prefix': 'dd'
    'body': """
    dd(${1:something});
    """
  # Command
  'Command option':
    'prefix': 'cmd:opt'
    'body': """
    \\$this->option('$1');$2
    """
  'Command confirm':
    'prefix': 'cmd:confirm'
    'body': """
    \\$this->confirm('${1:Do you wish to continue? [Y|N]}');$2
    """
  'Command info':
    'prefix': 'cmd:info'
    'body': """
    \\$this->info('${1:Message}');$2
    """
  'Command error':
    'prefix': 'cmd:error'
    'body': """
    \\$this->error('${1:Message}');$2
    """
  'Command warn':
    'prefix': 'cmd:warn'
    'body': """
    \\$this->warn('${1:Message}');$2
    """
  'Command ask(Prompts the user with question)':
    'prefix': 'cmd:ask'
    'body': """
    \\$this->ask('${1:Question}');$2
    """
  'Command start progress bar':
    'prefix': 'cmd:bar:start'
    'body': """
    \\$bar = \\$this->output->createProgressBar(${1:\\$user_count})$2;
    """
  'Command advance progress bar':
    'prefix': 'cmd:bar:adv'
    'body': """
    \\$bar->advance();
    """
  'Command finish progress bar':
    'prefix': 'cmd:bar:end'
    'body': """
    \\$bar->finish();
    """
  # Models
  'fillable attributes':
    'prefix': 'fillable:attr'
    'body': """
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['${1:properties}'$2];
    """
  'timestamps attributes':
    'prefix': 'timestamp:attr'
    'body': """
    public $timestamps = ${1:false};
    """
  'dates attributes':
    'prefix': 'dates:attr'
    'body': """
    protected $dates = ['${1:deleted_at}'];
    """
  'appends attributes':
    'prefix': 'appends:attr'
    'body': """
    /**
     * The accessors to appends to the model's array form.
     *
     * @var array
     */
    protected $appends = ['${1:is_admin}'$2];
    """
  'hidden attributes':
    'prefix': 'hidden:attr'
    'body': """
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = ['${1:password}'$2];
    """
  'Visible attributes':
    'prefix': 'visible:attr'
    'body': """
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $visible = ['${1:name}'$2];
    """
  'Attribute Cast to other type':
    'prefix': 'casts:attr'
    'body': """
    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        '${1:is_admin}' => '${2:boolean}',
        '${3:created_at}' => '${4:datetime\\:Y-m-d}',
    ];
    """
  'Attribute Accessor(Getter)':
    'prefix': 'getfun'
    'body': """
    /**
     * Get the ${1:user's first name}.
     *
     * @param  ${2:string}  ${3:\\$value}
     * @return ${4:string}
     */
    public function get${5:FirstName}Attribute(${3:\\$value})
    {
        return ${6:ucfirst(\\$value)};
    }
    """
  'Attribute Mutator(Setter)':
    'prefix': 'setfun'
    'body': """
    /**
     * Set the ${1:user's first name}.
     *
     * @param  ${2:string}  ${3:$value}
     * @return ${4:void}
     */
    public function set${5:FirstName}Attribute(${3:\\$value})
    {
        $this->attributes['${6:first_name}'] = ${7:strtolower(\\$value)};
    }
    """
  'hasMany function':
    'prefix': 'hasmany:fun'
    'body': """
    /**
     * Get the ${1:models} for the ${2:model}.
     *
     * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\HasMany
     */
    public function ${1:models}()
    {
        return $this->hasMany(${3:Name}::class${4:, 'foreign_key', 'local_key'});
    }
    """
  'belongsTo function':
    'prefix': 'belongsto:fun'
    'body': """
    /**
     * Get the ${1:model} that owns the ${2:model}.
     *
     * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\BelongsTo
     */
    public function ${1:model}()
    {
        return $this->belongsTo(${3:Name}::class${4:, 'foreign_key', 'local_key'});
    }
    """
  'belongsToMany function':
    'prefix': 'belongstom:fun'
    'body': """
    /**
     * The ${1:models} that belong to the ${2:model}.
     *
     * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\BelongsToMany
     */
    public function ${1:models}()
    {
        return $this->belongsToMany(${3:Name}::class${4:, 'table_name', 'my_model_key', 'another_model_key'});
    }
    """
  'hasOne function':
    'prefix': 'hasone:fun'
    'body': """
    /**
     * Get the ${1:models} for the ${2:model}.
     *
     * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\HasOne
     */
    public function ${1:models}()
    {
        return $this->hasOne(${3:Name}::class${4:, 'foreign_key', 'local_key'});
    }
    """
  'hasOneThrough function':
    'prefix': 'hasone:through'
    'body': """
    /**
     * Get the ${1:user}'s ${2:history}.
     */
    public function ${3:userHistory}()
    {
        return $this->hasOneThrough(
            '${4:App\\\\History}',
            '${5:App\\\\User}',
            '${6:supplier_id'}, // Foreign key on ${5:users} table...
            '${7:user_id}', // Foreign key on ${4:history} table...
            '${8:id}', // Local key on suppliers table...
            '${9:id}' // Local key on users table...
        );
    }
    """
  'hasManyThrough function':
    'prefix': 'hasmany:through'
    'body': """
    /**
     * Get the ${1:country}'s ${2:posts}.
     */
    public function ${3:posts}()
    {
        return $this->hasManyThrough(
            '${4:App\\\\Post}',
            '${5:App\\\\User}',
            '${6:country_id}', // Foreign key on ${5:users} table...
            '${7:user_id}', // Foreign key on ${4:posts} table...
            '${8:id}', // Local key on countries table...
            '${9:id}' // Local key on users table...
        );
    }
    """
  'morph one function':
    'prefix': 'morph:one'
    'body': """
    /**
     * Get the ${1:post}'s image.
     */
    public function ${2:image}()
    {
        return $this->morphOne(${3:'App\\\\Image'}, '${4:imageable}');
    }
    """
  'morph to function':
    'prefix': 'morph:to'
    'body': """
    /**
     * Get the owning ${1:imageable} model.
     */
    public function ${1:imageable}()
    {
        return $this->morphTo();
    }
    """
  'morph one-to-many function':
    'prefix': 'morph:many'
    'body': """
    /**
     * Get all of the ${1:post}'s ${2:comments}.
     */
    public function ${2:comments}()
    {
        return $this->morphMany(${3:'App\\\\Comment'}, '${4:commentable}');
    }
    """
  'morph many-to-many function':
    'prefix': 'morph:to:many'
    'body': """
    /**
     * Get all of the ${1:tags} for the ${2:post}.
     */
    public function ${1:tags}()
    {
        return $this->morphToMany(${3:'App\\\\Tag'}, '${4:taggable}');
    }
    """
  'morph many-by-many function':
    'prefix': 'morph:by:many'
    'body': """
    /**
     * Get all of the ${1:posts} that are assigned this ${2:tag}.
     */
    public function ${1:posts}()
    {
        return $this->morphedByMany(${3:'App\\\\Post'}, '${4:taggable}');
    }
    """
  'model with':
    'prefix': 'within'
    'body': """
    with(['$1' => function($query$2) {
        $query->where($3)->select($4);
    }]);
    """
  'model with relationship\'s count':
    'prefix': 'with:count'
    'body': """
    withCount(['${1:relationship}' => function($query$2) {
        $query->where($3);
    }]);
    """
  'model boot':
    'prefix': 'boot:fun'
    'body': """
    /**
     * The "booting" method of the model.
     *
     * @return void
     */
    protected static function boot()
    {
        parent::boot();
        static::${1:creating}(function(\$model){
            ${2}
        });
    }
    """
  'Scope function':
    'prefix': 'scope:fun'
    'body': """
    /**
     * Scope a query to only include ${2:description}.
     *
     * @param \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $query
     * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder
     */
    public function scope${1:Name}($query)
    {
        return $query->${3:where($4)};
    }
    """
  'Left join closure':
    'prefix': 'leftjoin:closure'
    'body': """
    leftJoin('${1:users}', function(\\$join) {
        \\$join->on('${1:users}\\.${2:user_id}', '${3:orders}\\.${2:user_id}')$4;
    })
    """
  'when column is not nullable':
    'prefix': 'when:closure'
    'body': """
    when('${1:column_not_null}', function(\\$query) {
        \\$query->where('${2:column}', '${3:value}')$4;
    })
    """
  'where column equals to another column':
    'prefix': 'where:column'
    'body': """
    whereColumn('${1:column1}', '${2:column2}')$3
    """
  'where have relationship exists':
    'prefix': 'where:has'
    'body': """
    whereHas('${1:relationship}', function(\\$query) {
        \\$query->where('${2:column}', '${3:value}')
                ${4:->from('table')};
    })
    """
  'where doenst have relationship':
    'prefix': 'where:doesnt:have'
    'body': """
    whereDoesntHave('${1:relationship}', function(\\$query) {
        \\$query->where('${2:column}', '${3:value}')
                ${4:->from('table')};
    })
    """
  'where has polymorphic relationships':
    'prefix': 'where:has:morph'
    'body': """
    whereHasMorph(
        ${1:'commentable'},
        [${2:'App\\\\Post'}, ${3:'App\\\\Video'}],
        function (Builder $query${4:, \$type}) {
            $query->where($5);
        }
    )
    """
  'where dosen\'t has polymorphic relationships':
    'prefix': 'where:doesn:morph'
    'body': """
    whereDoesntHaveMorph(
        ${1:'commentable'},
        ${2:'App\\\\Post'},
        function (Builder $query) {
            $query->where($3);
        }
    )
    """
  'where column In closure':
    'prefix': 'whereIn:closure'
    'body': """
    whereIn(${1:'id'}, function (Builder $query) {
            $query->where($2);
        }
    )
    """
  'Delete all records':
    'prefix': 'del:all'
    'body': "${1:Model}::truncate();$2"
  'Delete a record':
    'prefix': 'del:one'
    'body': "${1:model}->delete();$2"
  'Force delete record':
    'prefix': 'del:force'
    'body': "${1:model}->forceDelete();$2"
  'Update increment':
    'prefix': 'update:inc'
    'body': """
    DB::table('${1:users}')->increment('${2:votes}', ${3:1}${4:, ['${5:name}' => '${6:John}']});
    """
  'Update decrement':
    'prefix': 'update:dec'
    'body': """
    DB::table('${1:users}')->decrement('${2:votes}', ${3:1});
    """
  'Update case when':
    'prefix': 'db:update:case'
    'body': """
    ${1:DB}::update("UPDATE `${2:table}` SET `${3:column}` =
        CASE `${4:col}`
        WHEN ${5:val} THEN ?
        END
        WHERE $6", ${7:\\$params});
    """
  'Alias table query':
    'prefix': 'db:table:alias'
    'body': """
    DB::table(DB::raw("({${2:\\$query}->toSql()}) AS ${3:alias_table}"))->mergeBindings(${2:\\$query}->getQuery())$4
    """
  'Schema create table':
    'prefix': 'schema:table:create'
    'body': """
		Schema::create('${1:users}', function(Blueprint $table)
    {
        $table->bigIncrements('id');
        $table->${2:string}(${3:'${4:name}', ${5:50}})${6:->nullable()};
    });
    """
  'Schema drop table':
    'prefix': 'schema:table:drop'
    'body': """
    Schema::dropIfExists('${1:users}');
    """
  # View
  'Create a View with Data':
    'prefix': 'view:make'
    'body': """
    view('${1:view.name}', ${2:\\$data});$3
    """
  'Create a View, Pass Data with compact()':
    'prefix': 'view::make:compact'
    'body': """
    Create a View, Pass Data with compact()
    """
  'Create a View, Pass Data using with()':
    'prefix': 'view:make:with'
    'body': """
    view(${1:'view.name'})->with('${2:key}', ${3:\\$value});$4
    """
  'Render a view with some data':
    'prefix': 'view:render'
    'body': """
    view(${1:'name'}, ${2:\\$data})->render();$3
    """
  'Share Data across all Views':
    'prefix': 'view:share'
    'body': """
    view()->share('${1:key}', ${2:\\$value});$3
    """
  'Determine if a view exists':
    'prefix': 'view:exists'
    'body': """
    if (view()->exists('${1:view.name}'))
    {
        $2
    }
    """
  # Controller
  'Use DB':
    'prefix': 'use:db'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\DB;
    """
  'Use Rule':
    'prefix': 'use:rule'
    'body': """
    use Illuminate\\\\Validation\\\\Rule;
    """
  'Use Log':
    'prefix': 'use:log'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\Log;
    """
  'Use Request':
    'prefix': 'use:request'
    'body': """
    use Illuminate\\\\Http\\\\Request;
    """
  'Use Auth':
    'prefix': 'use:auth'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\Auth;
    """
  'Use Collection':
    'prefix': 'use:collect'
    'body': """
    use Illuminate\\\\Support\\\\Collection;
    """
  'Use Validator':
    'prefix': 'use:valid'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\Validator;
    """
  'Use FileSystem':
    'prefix': 'use:file'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\File;
    """
  'Use Storage':
    'prefix': 'use:storage'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\Storage;
    """
  'Use Redis':
    'prefix': 'use:redis'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\Redis;
    """
  'Use Cache':
    'prefix': 'use:cache'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\Cache;
    """
  'Use Event':
    'prefix': 'use:event'
    'body': """
    use Illuminate\\\\Support\\\\Facades\\\\Event;
    """
  'Use Str':
    'prefix': 'use:str'
    'body': """
    use Illuminate\\\\Support\\\\Str;
    """
  'Use Arr':
    'prefix': 'use:arr'
    'body': """
    use Illuminate\\\\Support\\\\Arr;
    """
  'Use Carbon':
    'prefix': 'use:car'
    'body': """
    use Carbon\\\\Carbon;
    """
  'Validator make':
    'prefix': 'valid:mk'
    'body': """
    $validator = Validator::make($request->${1:all()}, [
        '$2' => '${3:required}|${4:string}|${5:max\:255}',
        '$6' => '$7',
        $8
    ]);
    if ($validator->fails()) {
        $9
    }$10
    """
  'Transaction try catch':
    'prefix': 'trans:try'
    'body': """
    DB::beginTransaction();
    try {
        $1
        DB::commit();
        return ${2:\\$this->json_output(200, \\'修改信息\\', \\$datas)};
    } catch(\\\\Throwable $e) {
        \\\\Log::error($e->getFile() . ' ' . $e->getLine() . ': ' . $e->getMessage());
        DB::rollback();
        return ${3:\\$this->json_output(2007, \\'保存失败\\')};
    } catch(\\\\Exception $e) {
        \\\\Log::error($e->getFile() . ' ' . $e->getLine() . ': ' . $e->getMessage());
        DB::rollback();
        return ${4:\\$this->json_output(2007, \\'保存失败\\')};
    }$5
    """
  'Transaction closure':
    'prefix': 'tran:closure'
    'body': """
    DB::transaction(function () {
        $1
    });$2
    """
  'Middleware in controller':
    'prefix': 'mid:ctrl'
    'body': """
    /**
     * Instantiate a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('${1:auth}');

        $this->middleware('${2:log}')->only('${3:index}');
    }
    """
  # Request
  'Request method(GET,POST,...)':
    'prefix': 'req:method'
    'body': """
    \\$request->method()
    """
  'Request URL(without query)':
    'prefix': 'req:url'
    'body': """
    \\$request->url()
    """
  'Request full-URL':
    'prefix': 'req:full:url'
    'body': """
    \\$request->fullUrl()
    """
  'Request full-URL with query':
    'prefix': 'req:full:url:query'
    'body': """
    \\$request->fullUrlWithQuery(${1:\\$query})$2
    """
  'Request key exists?':
    'prefix': 'req::exists'
    'body': """
    \\$request->exists('${1:key}')$2"
    """
  'Request has key?':
    'prefix': 'req:has'
    'body': """
    \\$request->has('${1:key}')$2
    """
  'Request input':
    'prefix': 'req:input'
    'body': """
    \\$request->input('${1:key}'${2:, 'default'})$3
    """
  'Request only keys':
    'prefix': 'req:only'
    'body': """
    \\$request->only(${1:\\$keys})$2
    """
  'Request except keys':
    'prefix': 'req:except'
    'body': """
    \\$request->except(${1:\\$keys})$2
    """
  'Request query key-value':
    'prefix': 'req:query'
    'body': """
    \\$request->query('${1:key}', '${2:default'})$3
    """
  'Request has Cookie?':
    'prefix': 'req:has:cookie'
    'body': """
    \\$request->hasCookie('${1:key}')$2
    """
  'Request get cookie':
    'prefix': 'req:cookie'
    'body': """
    \\$request->cookie('${1:key}', '${2:default'})$3
    """
  'Request get all files array':
    'prefix': 'req:files'
    'body': """
    \\$request->allFiles()
    """
  'Request has file?':
    'prefix': 'req:has:file'
    'body': """
    \\$request->hasFile('${1:key}')$2
    """
  'Request get a file':
    'prefix': 'req:get:file'
    'body': """
    \\$request->file('${1:key}'${2:, 'default'})$2
    """
  # Cache
  'Cache get':
    'prefix': 'cc:get'
    'body': """
    ${1:\\$value} = Cache::get('${2:key}', '${3:default}');
    """
  'Cache has':
    'prefix': 'cc:has'
    'body': """
    Cache::has('${1:key}')
    """
  'Cache remember':
    'prefix': 'cc:re'
    'body': """
    ${1:\\$value} = Cache::remember('${2:users}', ${3:\\$minutes}, function () {
        return ${4:DB::table('users')->get()};
    });
    """
  'Cache add if not exists':
    'prefix': 'cc:add'
    'body': """
    Cache::add('${1:key}', ${2:\\$value}, ${3:\\$minutes});$4
    """
  'Cache put':
    'prefix': 'cc:put'
    'body': """
    Cache::put('${1:key}', '${2:value}', ${3:\\$minutes});$4
    """
  'Cache forget':
    'prefix': 'cc:forget'
    'body': """
    Cache::forget('${1:key}');$2
    """
  'Cache pull':
    'prefix': 'cc:pull'
    'body': """
    Cache::pull('${1:key}');$2
    """
  'Cache increment':
    'prefix': 'cc:inc'
    'body': """
    Cache::increment('${1:key}', ${2:\\$amount});$3
    """
  'Cache decrement':
    'prefix': 'cc:dec'
    'body': """
    Cache::decrement('${1:key}', ${2:\\$amount});$3
    """
  'Cache lock get':
    'prefix': 'cc:lock:get'
    'body': """
    Cache::lock('${1:lock-name}', ${2:60})->get()
    """
  'Cache lock release':
    'prefix': 'cc:lock:rel'
    'body': """
    Cache::lock('${1:lock-name}')->release()
    """
  'Cache lock block':
    'prefix': 'Cache::lock:block'
    'body': """
    Cache::lock('${1:lock-name}', ${2:60})->block(${3:10})
    """
  # File
  'Check file or directory exists':
    'prefix': 'file:exists'
    'body': """
    File::exists(${1:\\\\$filepath});$2
    """
  'Create directory':
    'prefix': 'file:mkdir'
    'body': """
    File::makeDirectory(${1:\\\\$filepath});$2
    """

  # Config
  'Config get':
    'prefix': 'cf:get'
    'body': """
    Config::get('${1:key}', '${2:default}');$3
    """
  'Config has':
    'prefix': 'cf:has'
    'body': """
    Config::has('${1:key}')$2
    """
  'Config set':
    'prefix': 'cf:set'
    'body': """
    Config::set('${1:key}', ${2:\\$value});$3
    """
  'Config set-Many':
    'prefix': 'cf:set:many'
    'body': """
    Config::set([
        ${1:key}' => ${2:\\$value},$3",
    ]);$4"
    """
  # Route
  'Route current route name':
    'prefix': 'route:cur:act'
    'body': """
    Route::currentRouteAction();
    """
  'Route group':
    'prefix': 'route:group'
    'body': """
    Route::group(${1:['${2:prefix}' => '${3:admin}']}, function () {
        $4
    });
    """
  'Route group middleware':
    'prefix': 'route:group:middleware'
    'body': """
    Route::group(['middleware' => ['${1:groupName}']], function () {
        $2
    });
    """
  'Route controller@action':
    'prefix': 'route:ctl:act'
    'body': """
    Route::${1:get}('${2:users\\/\\{id\\}}', '${3:UserController@profile}');
    """
  'Route get/post/del closure':
    'prefix': 'route:closure'
    'body': """
    Route::${1:get}('${2:users\\/\\{id\\}}', function (${3:\\$id}) {
        $4
    });
    """
  # Auth
  'Is current user auth?':
    'prefix': 'auth:check'
    'body': """
    Auth::check()
    """
  'Is current user guest?':
    'prefix': 'auth:guest'
    'body': """
    Auth::guest()
    """
  'Log the user out':
    'prefix': 'auth:logout'
    'body': """
    Auth::logout();
    """
  'Get the currently auth user':
    'prefix': 'auth:user'
    'body': """
    Auth::user()
    """
  'customize the \"guard\" that is used to authenticate and register users':
    'prefix': 'auth:guard'
    'body': """
    Auth::guard('${1:guardName}')$2
    """
  'Login by key-value':
    'prefix': 'auth:attempt'
    'body': """
    Auth::attempt([${1:'email' => \\$email, 'password' => \\$password}])$2
    """
  'Login an existing user':
    'prefix': 'auth:login'
    'body': """
    Auth::login(${1:\\$user});$2
    """
  'Login by user id':
    'prefix': 'auth:login:id'
    'body': """
    Auth::loginUsingId($1);$2
    """
  # Array Helper
  'Using dot to add elem':
    'prefix': 'array:add'
    'body': """
    array_add(${1:\\$array}, ${2:'key'}, ${3:'value'})$4
    """
  'Collapse to a single array':
    'prefix': 'array:collapse'
    'body': """
    array_collapse(${1:\\$array})$2
    """
  'Get an item from an data array using \"dot\" notation':
    'prefix': 'array:data:get'
    'body': """
    data_get(${1:\\$array}, ${2:'names.john'}, ${3:'default'})$4
    """
  'Divide an array into two arrays':
    'prefix': 'array:divide'
    'body': """
    list(${1:\\$keys}, ${2:\\$values}) = array_divide(${3:\\$array})$4
    """
  'Flatten a multi-dimensional associative array with dots':
    'prefix': 'array:dot'
    'body': """
    array_dot(${1:\\$array})$2
    """
  'Get the last element of an array. Useful for method chaining':
    'prefix': 'array:last'
    'body': """
    last(${1:\\$array)$2
    """
  'Get all of the given array except for a specified array of items':
    'prefix': 'array:except'
    'body': """
    array_except(${1:\\$array}, ${2:['key', 'otherKey']})$3
    """
  'Return the first element in an array passing a given truth test':
    'prefix': 'array:first'
    'body': """
    array_first(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {
        return ${4:\\$value >= 150;}
    });$5
    """
  'Will flatten a multi-dimensional array into a single level':
    'prefix': 'array:flatten'
    'body': """
    array_flatten(${1:\\$array})$2
    """
  'Remove one or many array items from a given array using dot notation':
    'prefix': 'array:forget'
    'body': """
    array_forget(${1:\\$array}, ${2:'names.joe'})$3
    """
  'Get an item from an array using \"dot\" notation':
    'prefix': 'array:get'
    'body': """
    array_get(${1:\\$array}, ${2:'names.john'}, ${3:'default'})$4
    """
  'Check if an item exists in an array using \"dot\" notation':
    'prefix': 'array:has'
    'body': """
    array_has(${1:\\$array}, ${2:key})$3"
    """
  'Get the first element of an array. Useful for method chaining':
    'prefix': 'array:head'
    'body': """
    head(${1:\\$array})$2
    """
  'Return the last element in an array passing a given truth test':
    'prefix': 'array:last'
    'body': """
    array_last(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {
        return ${4:\\$value >= 150;}
    });$5
    """
  'Get a subset of the items from the given array':
    'prefix': 'array:only'
    'body': """
    array_only(${1:\\$array}, ${2:['key', 'otherKey']})$3
    """
  'Pluck an array of values from an array':
    'prefix': 'array:pluck'
    'body': """
    array_pluck(${1:\\$array}, ${2:'value'})$3
    """
  'Push an item onto the beginning of an array':
    'prefix': 'array:prepend'
    'body': """
    array_prepend(${1:\\$array}, ${2:'value'})$3
    """
  'Get a value from the array, and remove it':
    'prefix': 'array:pull'
    'body': """
    array_pull(${1:\\$array}, ${2:'value'})$3
    """
  'Set an array item to a given value using \"dot\" notation':
    'prefix': 'array:set'
    'body': """
    array_set(${1:\\$array}, ${2:'products.desk.price'}, ${3:200})$4
    """
  'Recursively sort an array by keys and values':
    'prefix': 'array:sort:rec'
    'body': """
    array_sort_recursive(${1:\\$array});$2
    """
  'Sort the array using the given callback.':
    'prefix': 'array:sort'
    'body': """
    array_values(array_sort(${1:\\$array}, function (${2:\\$key}, ${3:\\$value}) {
        return ${3:\\$value}['${4:name}'];
    }));$5
    """
  'Filter the array using the given callback':
    'prefix': 'array:where'
    'body': """
    array_where(${2:\\$array}, function (${3:\\$key}, ${4:\\$value}) {
        return ${4:is_string(\\$value);}
    });$5
    """
  # Str Helper
  'Generate Random string':
    'prefix': 'str:rand'
    'body': """
    Str::random(${1:20})$2;
    """
  'Replace string by array':
    'prefix': 'str:replace:array'
    'body': """
    Str::replaceArray(${1:'?'}, ${2:['8:30', '9:00']}, ${3:'? and ?'});
    """
  'Replace the first occurrence value in a string':
    'prefix': 'str:replace:first'
    'body': """
    Str::replaceFirst('${1:the}', '${2:a}', '${3:the mess}');
    """
  'Convert string to singular':
    'prefix': 'str:singular'
    'body': """
    Str::singular(${1:'children'})$2;
    """
  'Generate a URL "slug" from string':
    'prefix': 'str:slug'
    'body': """
    Str::slug(${1:'Laravel 5 Framework'}, ${2:'-'});
    """
  'Convert string to snake_case':
    'prefix': 'str:snake'
    'body': """
    Str::snake(${1:'fooBar'})$2
    """
  'Add a single instance of string':
    'prefix': 'str:start'
    'body': """
    Str::start(${1:'this/string'}, '${2:/}')$3;
    """
  'Check string is start with value':
    'prefix': 'str:start:with'
    'body': """
    Str::startWith(${1:'This is my name'}, ${2:'This'})$3;
    """
  'Convert string to studlycase':
    'prefix': 'str:studly '
    'body': """
    Str::studly(${1:'foo_bar'})$2;
    """
  'Convert string to TitleCase':
    'prefix': 'str:title '
    'body': """
    Str::title(${1:'tom and jerry'})$2;
    """
  'Generate UUID':
    'prefix': 'str:uuid'
    'body': """
    Str::uuid();
    """
  'Limit the number of words in a string':
    'prefix': 'str:words'
    'body': """
    Str::words(${1:'Perfectly balanced, as all things should be.'}, ${2:3}, ${3:' >>>'});
    """

  # Log
  'Storing and use daily log file(Not support 5.6+)':
    'prefix': 'log:files:daily'
    'body': """
    Log::useDailyFiles(${1:storage_path().'/logs/${2:my}.log'}, ${3:7});
    """
  'Storing and use log file(Not support 5.6+)':
    'prefix': 'log:files'
    'body': """
    Log::useFiles(${1:storage_path().'/logs/${2:my}.log'});
    """
  'Log a message to a channel':
    'prefix': 'log:channel'
    'body': """
    Log::channel('${1:slack}')->info(${2:'Something happened!'});
    """
  'Logging stack consisting of multiple channels.':
    'prefix': 'log:stack:channels'
    'body': """
    Log::stack(${1:['${2:single}', '${3:slack}']})->info(${4:'Something happened!'});
    """
  #
  # Redis:
  #
  'red:cont':
    'prefix': 'Redis connection'
    'body': """
    Redis::connection(${1:connection_name})$2
    """
  # Redis string
  'red:get':
    'prefix': 'Redis get key'
    'body': """
    ${1:\\$redis}->get(${2:key})$3
    """
  'red:set':
    'prefix': 'Redis set key value'
    'body': """
    ${1:\\$redis}->set(${2:key}, ${3:value})$4
    """
  'red:exp':
    'prefix': 'Redis expire key value'
    'body': """
    ${1:\\$redis}->expire(${2:key}, ${3:ttl})$4
    """
  'red:del':
    'prefix': 'Redis delete key value'
    'body': """
    ${1:\\$redis}->del(${2:key})$3
    """
  'red:setrange':
    'prefix': 'Redis replace string by key and index'
    'body': """
    ${1:\\$redis}->setrange(${2:key}, ${3:value}, ${4:replace_value})
    """
  'red:exists':
    'prefix': 'Redis if key exists'
    'body': """
    ${1:\\$redis}->exists(${2:key})
    """
  'red:setex':
    'prefix': 'Redis set key-value and expire time'
    'body': """
    ${1:\\$redis}->setex(${2:key}, ${3:value}, ${4:time})
    """
  'red:setnx':
    'prefix': 'Redis set key-value if key not exists'
    'body': """
    ${1:\\$redis}->setnx(${2:key}, ${3:value})
    """
  'red:incr':
    'prefix': 'Redis increase value'
    'body': """
    ${1:\\$redis}->incr(${2:key})
    """
  'red:incrby':
    'prefix': 'Redis increase value by steps'
    'body': """
    ${1:\\$redis}->incrby(${2:key}, ${3:step})
    """
  'red:decr':
    'prefix': 'Redis descrease value'
    'body': """
    ${1:\\$redis}->decr(${2:key})
    """
  'red:decrby':
    'prefix': 'Redis decrease value by steps'
    'body': """
    ${1:\\$redis}->decrby(${2:key}, ${3:step})
    """
  # Redis hashes
  'red:hmget':
    'prefix': 'Redis get multi hash'
    'body': """
    ${1:\\$redis}->hmget(${2:key}, ${3:field})
    """
  'red:hmset':
    'prefix': 'Redis set multi hash'
    'body': """
    ${1:\\$redis}->hmset(${2:key}, ${3:array})
    """
  # Redis list
  'red:lpush':
    'prefix': 'Redis left push'
    'body': """
    ${1:\\$redis}->lpush(${2:'list_name'}, ${3:value})
    """
  'red:rpush':
    'prefix': 'Redis right push'
    'body': """
    ${1:\\$redis}->rpush(${2:'list_name'}, ${3:value})
    """
  'red:len':
    'prefix': 'Redis get list length'
    'body': """
    ${1:\\$redis}->len(${2:'list_name'});
    """
  'red:lindex':
    'prefix': 'Redis get list specific position range value'
    'body': """
    ${1:\\$redis}->lindex(${2:'list_name'}, ${3:range});
    """
  'red:lrem':
    'prefix': 'Redis remove value from list on left'
    'body': """
    ${1:\\$redis}->lrem(${2:'list_name'}, ${3:range}, '');
    """
  'red:lpop':
    'prefix': 'Redis left pop'
    'body': """
    ${1:\\$redis}->lpop(${2:'list_name'});
    """
  'red:rpop':
    'prefix': 'Redis right pop'
    'body': """
    ${1:\\$redis}->rpop(${2:'list_name'});
    """
  'red:sort':
    'prefix': 'Redis sort in list'
    'body': """
    ${1:\\$redis}->sort('${2:tab}', array('${3:sort}' => '${4:desc}')) ;
    """
  # Redis sets
  'red:sadd':
    'prefix': 'Redis add value to sets'
    'body': """
    ${1:\\$redis}->sadd(${2:'sets_name'}, ${3:sets_value});
    """
  'red:scard':
    'prefix': 'Redis return sets elem count'
    'body': """
    ${1:\\$redis}->scard(${2:'sets_name'});
    """
  'red:smembers':
    'prefix': 'Redis return all members in sets'
    'body': """
    ${1:\\$redis}->smembers(${2:'sets_name'});
    """
  'red:srem':
    'prefix': 'Redis remove the element in sets'
    'body': """
    ${1:\\$redis}->srem(${2:'sets_name'}, ${3:num});
    """
  'red:spop':
    'prefix': 'Redis pop element from sets'
    'body': """
    ${1:\\$redis}->spop(${2:'sets_name'});
    """
  'red:smove':
    'prefix': 'Redis move values from one to another'
    'body': """
    ${1:\\$redis}->smove(${2:'sets_1'}, ${3:'sets_2'}, ${4:value});
    """
  'red:sdiff':
    'prefix': 'Redis get difference in two sets'
    'body': """
    ${1:\\$redis}->sdiff(${2:'sets_1'}, ${3:'sets_2'});
    """
  'red:sunion':
    'prefix': 'Redis get union values in two sets'
    'body': """
    ${1:\\$redis}->sunion(${2:'sets_1'}, ${3:'sets_2'});
    """
  'red:sinter':
    'prefix': 'Redis get intersection in two sets'
    'body': """
    ${1:\\$redis}->sinter(${2:'sets_1'}, ${3:'sets_2'});
    """
  # sorted sets
  'red:zadd':
    'prefix': 'Redis add value to sorted sets'
    'body': """
    ${1:\\$redis}->sadd(${2:'sets_name'}, ${3:sets_value});
    """
  'red:zincrby':
    'prefix': 'Redis increase sorted sets value by steps'
    'body': """
    ${1:\\$redis}->zincrby(${2:'sets_name'}, ${3:steps});
    """
  'red:zrem':
    'prefix': 'Redis remove sorted sets value'
    'body': """
    ${1:\\$redis}->zrem(${2:'sets_name'}, ${3:value});
    """
  'red:zrange':
    'prefix': 'Redis return values in range'
    'body': """
    ${1:\\$redis}->zrange(${2:'sets_name'}, ${3:from}, ${4:to});
    """
  'red:zrevrange':
    'prefix': 'Redis return reverse values in range'
    'body': """
    ${1:\\$redis}->zrevrange(${2:'sets_name'}, ${3:from}, ${4:to});
    """
  'red:zscore':
    'prefix': 'Redis return index of sorted sets value '
    'body': """
    ${1:\\$redis}->zscore(${2:'sets_name'}, ${3:value});
    """
  'red:zcount':
    'prefix': 'Redis return the sorted sets count'
    'body': """
    ${1:\\$redis}->zcount(${2:'sets_name'});
    """
  # Redis more
  'red:keys':
    'prefix': 'Redis get keys'
    'body': """
    ${1:\\$redis}->keys(${2:'cms:*'});
    """
  'red:scan':
    'prefix': 'Redis scan by keys'
    'body': """
    use Predis\\\\Collection\\\\Iterator;
    foreach (new IteratorKeyspace(${1:\\$client}, ${2:\\$pattern}) as ${3:\\$key}) {
        $4
    }
    """
